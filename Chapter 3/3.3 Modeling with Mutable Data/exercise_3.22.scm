(define (make-queue)
    (let ((front-ptr '())
          (rear-ptr '()))
        (define (empty-queue?)
            (null? front-ptr))
        (define (front-queue)
            (if (empty-queue?)
                (error "FRONT called with an empty queue")
                (car front-ptr)))
        (define (insert-queue! item)
            (let ((new-pair (cons item '())))
                (cond ((empty-queue?)
                        (set! front-ptr new-pair)
                        (set! rear-ptr new-pair)
                        front-ptr)
                      (else 
                        (set-cdr! rear-ptr new-pair)
                        (set! rear-ptr new-pair)
                        front-ptr))))
        (define (delete-queue!)
            (if (empty-queue?)
                (error "DELETE! called with an empty queue")
                (begin (set! front-ptr (cdr front-ptr))
                front-ptr)))
        (define (dispatch m)
            (cond ((eq? m 'empty-queue? ) (empty-queue?))
                  ((eq? m 'front-queue ) (front-queue))
                  ((eq? m 'insert-queue! ) insert-queue!)
                  ((eq? m 'delete-queue!) (delete-queue!))
                  (else 
                    (error "Invalid operation: QUEUE" m))))
    dispatch))