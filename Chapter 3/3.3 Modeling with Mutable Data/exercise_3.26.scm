(load "Chapter 3/3.3 Modeling with Mutable Data/table-representation.scm")
(load "Chapter 2/2.3 Symbolic Data/set-binary.scm")

(define (adjoin-set x set)
    (cond ((null? set) (make-tree x '() '()))
          ((= (car x) (car (entry set))) set)
          ((< (car x) (car (entry set)))
           (make-tree (entry set)
                      (adjoin-set x (left-branch set))
                      (right-branch set)))
          ((> (car x) (car (entry set)))
           (make-tree (entry set)
                      (left-branch set)
                      (adjoin-set x (right-branch set))))))

(define (make-table)
    (let ((local-table '()))
        (define (lookup key)
            (define (lookup-helper key records)
                (cond
                    ((null? records) #f)
                    ((< key (car (entry records)))
                        (lookup-helper key (left-branch records)))
                    ((= key (car (entry records)))
                        (cdr (entry records)))
                    ((> key (car (entry records)))
                        (lookup-helper key (right-branch records)))))
            (lookup-helper key local-table))
        (define (insert! key value)
            (let ((record (lookup key)))
                (if record
                    (set-cdr! record value)
                    (set! local-table (adjoin-set (cons key value) local-table))))
           'ok )
        (define (dispatch m)
            (cond ((eq? m 'lookup-proc ) lookup)
                  ((eq? m 'insert-proc! ) insert!)
                  (else (error "Unknown operation: TABLE" m))))
        dispatch))