(define balance 100)
(define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))

(define new-withdraw
    (let ((balance 100))
        (lambda (amount)
            (if (>= balance amount)
                (begin (set! balance (- balance amount))
                       balance)
                "Insufficient funds"))))
                
(define (make-account balance)
    (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
                   balance)
            "Insufficient Funds"))   
    (define (deposit amount)
        (set! balance (+ balance amount))
        balance)
    (define (dispatch m)
        (cond ((eq? m 'withdraw ) withdraw)
              ((eq? m 'deposit ) deposit)
              (else (error "Unknown request: MAKE-ACCOUNT"
                           m))))
    dispatch)

(define acc (make-account 100))

(define rand (let ((x random-init))
                (lambda ()
                    (set! x (rand-update x))
                    x)))

(define (estimate-pi trials)    
    (sqrt (/ 6 (monte-carlo trials cesaro-test))))
(define (cesaro-test)
    (= (gcd (rand) (rand)) 1))
(define (monte-carlo trials experiment)
    (define (iter trials-remaining trials-passed)
        (cond ((= trials-remaining 0)
               (/ trials-passed trials))
              ((experiment)
               (iter (- trials-remaining 1)
                     (+ trials-passed 1)))
              (else
                (iter (- trials-remaining 1)
                      trials-passed))))
    (iter trials 0))

(define (estimate-pi trials)
    (sqrt (/ 6 (random-gcd-test trials random-init))))
(define (random-gcd-test trials initial-x)
    (define (iter trials-remaining trials-passed x)
        (let ((x1 (rand-update x)))
            (let ((x2 (rand-update x1)))
                (cond ((= trials-remaining 0)
                       (/ trials-passed trials))
                      ((= (gcd x1 x2) 1)
                       (iter (- trials-remaining 1)
                             (+ trials-passed 1)
                             x2))
                      (else
                        (iter (- trials-remaining 1)
                              trials-passed
                              x2))))))
    (iter trials 0 initial-x))