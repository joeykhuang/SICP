(define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (current-inexact-milliseconds)))
(define (start-prime-test n start-time)
    (if (is-prime? n)
        (report-prime (- (current-inexact-milliseconds) start-time))))
(define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))
(define (is-prime? n)
    (= (smallest-divisor n) n))

(define (search-for-primes lowerbound upperbound)
    (if (is-even? lowerbound)
        (search-for-primes (+ lowerbound 1) upperbound)
        (cond ((< lowerbound upperbound) (timed-prime-test lowerbound)
            (search-for-primes (+ lowerbound 2) upperbound)))))

(define (is-even? n)
    (= (remainder n 2) 0))

(define (smallest-divisor n) (find-divisor n 2))
(define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder b a) 0))