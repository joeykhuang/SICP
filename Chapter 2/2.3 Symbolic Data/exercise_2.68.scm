(load "Chapter 2/2.3 Symbolic Data/huffman-encoding.scm")
(define (element-of-set? x set) 
    (cond ((null? set) false) 
        ((equal? x (car set)) true) 
        (else (element-of-set? x (cdr set))))) 

(define (encode message tree)
    (if (null? message)
        '()
        (append (encode-symbol (car message) tree)
                (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
    (define (branch-correct? branch)
        (if (leaf? branch)
            (equal? symbol (symbol-leaf branch))
            (element-of-set? symbol (symbols branch))))
    (let ((lb (left-branch tree))
          (rb (right-branch tree)))
         (cond ((branch-correct? lb)
                (if (leaf? lb)
                    '(0)
                    (cons 0 (encode-symbol symbol lb))))
               ((branch-correct? rb)
                (if (leaf? rb)
                    '(1)
                    (cons 1 (encode-symbol symbol rb))))
               (else (error "bad symbol -- ENCODE-SYMBOL" bit)))))