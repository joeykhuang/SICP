(load "Chapter 2/Chapter 2.3 Symbolic Data/differentiation.scm")
(define (deriv exp var)
    (cond ((number? exp) 0)
          ((variable? exp)
           (if (same-variable? exp var) 1 0))
          ((sum? exp)
           (make-sum (deriv (addend exp) var)
                     (deriv (augend exp) var))) 
          ((product? exp)
           (make-sum (make-product
                      (multiplier exp)
                      (deriv (multiplicand exp) var))
                     (make-product
                      (deriv (multiplier exp) var)
                      (multiplicand exp))))
          (else (error "unknown expression type: DERIV" exp))))

(define (deriv exp var)
    (cond ((number? exp) 0)
          ((variable? exp)
           (if (same-variable? exp var) 1 0))
          (else ((get 'deriv (operator exp))
                 (operands exp) var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))

; part b
(define (install-addition-package)
    (define (make-sum a1 a2)
        (cond ((=number? a1 0) a2)
            ((=number? a2 0) a1)
            ((and (number? a1) (number? a2))
            (+ a1 a2))
            (else (list '+ a1 a2))))
    (define (=number? exp num)
        (and (number? exp) (= exp num)))
    (define (addend s)
        (cadr s))
    (define (augend s)
        (caddr s))
    (define (deriv exp var)
        (make-sum (deriv (addend exp) var)
                  (deriv (augend exp) var)))
    (define (tag s) (attach-tag '+ s))
    (put 'deriv '(+)
        (lambda (exp var) (tag (deriv exp var)))))

(define (install-multiplication-package)
    (define (make-sum a1 a2)
        (cond ((=number? a1 0) a2)
            ((=number? a2 0) a1)
            ((and (number? a1) (number? a2))
            (+ a1 a2))
            (else (list '+ a1 a2))))
    (define (make-product m1 m2)
        (cond ((or (=number? m1 0) (=number? m2 0)) 0)
            ((=number? m1 1) m2)
            ((=number? m2 1) m1)
            ((and (number? m1) (number? m2)) (* m1 m2))
            (else (list '* m1 m2))))
    (define (=number? exp num)
        (and (number? exp) (= exp num)))
    (define (multiplier s)
        (cadr s))
    (define (multiplicand s)
        (caddr s))
    (define (deriv exp var)
        (make-sum
            (make-product (multiplier exp)
                          (deriv (multiplicand exp) var))
            (make-product (deriv (multiplier exp) var)
                          (multiplicand exp))))
    (define (tag s) (attach-tag '* s))
    (put 'deriv '(*)
        (lambda (exp var) (tag (deriv exp var)))))
    
    ; part c
(define (install-exponentiation-package)
    (define (make-exponentiation base exponent)
        (cond ((=number? base 0) 0)
            ((=number? exponent 0) 1)
            ((=number? exponent 1) base)
            ((and (number? base) (number? exponent))
                (expt base exponent))
            (else (list base '** exponent))))
   (define (make-sum a1 a2)
        (cond ((=number? a1 0) a2)
            ((=number? a2 0) a1)
            ((and (number? a1) (number? a2))
            (+ a1 a2))
            (else (list '+ a1 a2))))
    (define (make-product m1 m2)
        (cond ((or (=number? m1 0) (=number? m2 0)) 0)
            ((=number? m1 1) m2)
            ((=number? m2 1) m1)
            ((and (number? m1) (number? m2)) (* m1 m2))
            (else (list '* m1 m2))))
    (define (=number? exp num)
        (and (number? exp) (= exp num)))
    (define (base exp) (car exp))
    (define (exponent exp)
        (if (single-operants exp)
            (caddr exp)
            (cons (caddr exp) (cons '** (cdddr exp)))))
    (define (single-operants exp)
        (null? (cdddr exp)))
    (define (deriv exp var)
        (make-product
            (make-product (exponent exp)
                (make-exponentiation (base exp) (make-sum (exponent exp) -1)))
            (deriv (base exp) var)))
    (define (tag s) (attach-tag '** s))
    (put 'deriv '(**)
        (lambda (exp var) (tag (deriv exp var)))))