(load "Chapter 4/4.1 The Metacircular Evaluator/exercise_4.4.scm")
(define (cond-tr? clause) (eq? '=> (cadr clause)))
(define (cond-actions-tr clause) (caddr clause))
(define (expand-clauses clauses)
    (if (null? clauses)
        'false 
        (let ((first (car clauses))
              (rest (cdr clauses)))
            (if (cond-else-clause? first)
                (if (null? rest)
                    (if (cond-tr? first)
                        (sequence->exp (cond-actions-tr (cond-predicate first)))
                        (sequence->exp (cond-actions first)))
                    (error "ELSE clause isn't last: COND->IF" clauses))
                (make-if (cond-predicate first)
                         (if (cond-tr? first)
                             (list (cond-actions-tr first) (cond-predicate first))
                             (sequence->exp (cond-actions first)))
                         (expand-clauses rest))))))

; (expand-clauses '(((assoc 'b '((a 1) (b 2))) => cadr)
;                   (else false)))

(if (assoc 'b '((a 1) (b 2)))
    (cadr (assoc 'b '((a 1) (b 2))))
    false)